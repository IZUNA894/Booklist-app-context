{"version":3,"sources":["context/themeContext.js","context/authContext.js","components/navbar.js","context/bookContext.js","components/bookmarks.js","components/toggleButton.js","components/toggleButtonAuth.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","dark","toggleTheme","setState","Provider","value","this","props","children","Component","AuthContext","AuthContextProvider","isAuthentiacated","toggleAuth","Navbar","useContext","theme","style","background","color","BookContext","BookContextProvider","useState","id","name","books","setBooks","addBooks","book","Math","random","Bookmarks","addbooks","booksObj","map","className","ToggleButton","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87dec965.chunk.js","sourcesContent":["import React, { Component ,createContext} from 'react';\r\n\r\nexport const ThemeContext= createContext();\r\n\r\nclass ThemeContextProvider extends Component {\r\n    state={\r\n        isLightTheme:true,\r\n        light:{syntax:\"#555\",ui:\"#ddd\",bg:\"#eee\"},\r\n        dark:{syntax:\"#ddd\",ui:\"#333\",bg:\"#555\"}\r\n    }\r\n    toggleTheme = ()=>{\r\n        this.setState({isLightTheme:!this.state.isLightTheme});\r\n    }\r\n    render() {\r\n        return (\r\n            <ThemeContext.Provider value={{...this.state,toggleTheme:this.toggleTheme}}>\r\n                {this.props.children}\r\n            </ThemeContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ThemeContextProvider;","import React, { Component ,createContext} from 'react'\r\nexport const AuthContext = createContext();\r\n\r\nexport default class AuthContextProvider extends Component {\r\n    state={\r\n        isAuthentiacated:false\r\n\r\n    }\r\n    toggleAuth = ()=>{\r\n        this.setState({isAuthentiacated:!this.state.isAuthentiacated})\r\n    }\r\n    render() {\r\n        return (\r\n            <AuthContext.Provider value={{...this.state,toggleAuth : this.toggleAuth}} >\r\n                {this.props.children}\r\n            </AuthContext.Provider>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component,useContext } from 'react'\r\nimport {ThemeContext} from \"../context/themeContext.js\";\r\nimport {AuthContext} from \"../context/authContext.js\";\r\n\r\n// export default class Navbar extends Component {\r\n//     //static contextType = ThemeContext;\r\n\r\n//     render() {\r\n        \r\n\r\n//         return (\r\n//             <AuthContext.Consumer>{(authContext)=>(\r\n//             <ThemeContext.Consumer>{(themeContext)=>{\r\n                \r\n//             }}\r\n//             </ThemeContext.Consumer>\r\n//             )}\r\n//             </AuthContext.Consumer>\r\n            \r\n//         )\r\n//     }\r\n// }\r\n\r\nconst Navbar =()=>{\r\n    var {isAuthentiacated} = useContext(AuthContext);\r\n    var {isLightTheme,light ,dark} = useContext(ThemeContext);\r\n    const theme = isLightTheme ? light:dark;\r\n    return(\r\n        \r\n            <nav style={{background:theme.ui,color:theme.syntax}}>\r\n                <h1>Context-app</h1>\r\n                <h2 >{isAuthentiacated ? 'Logged In' : 'Not Logged In' }</h2>\r\n                <ul>\r\n                    <li>Coffee</li>\r\n                    <li>Milk</li>\r\n                    <li>Sugar</li>\r\n                    <li>Tea</li>\r\n\r\n                </ul>\r\n            </nav>\r\n        \r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React , {Component,createContext,useState} from 'react';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = (props)=>{\r\nconst [books,setBooks] = useState([\r\n    {id:1,name:\"Lost soul\"},\r\n    {id:2,name:\"Last symbol\"},\r\n    {id:3,name:\"Brigth sunshine\"}\r\n]);\r\nconst addBooks = (book)=>{\r\n    setBooks([ ...books,{id:Math.random(),name:book}]);\r\n}\r\nreturn(\r\n    <BookContext.Provider value={{ books,addBooks}}>\r\n        {props.children}\r\n    </BookContext.Provider>\r\n)\r\n}\r\n\r\nexport default BookContextProvider\r\n","import React, { Component ,useContext} from 'react'\r\nimport {ThemeContext} from \"../context/themeContext\";\r\nimport {BookContext} from \"../context/bookContext\";\r\n\r\n// export default class Bookmarks extends Component {\r\n//     static contextType = ThemeContext;\r\n\r\n//     render() {\r\n       \r\n\r\n//         return (\r\n            \r\n//         )\r\n//     }\r\n// }\r\n\r\nconst Bookmarks = ()=>{\r\n    const {isLightTheme,light,dark} = useContext(ThemeContext);\r\n    const {books,addbooks} = useContext(BookContext);\r\n    const theme= isLightTheme ? light : dark;\r\n\r\n    var booksObj = books && books.map((book)=>{\r\n        return(\r\n            <li style= {{background:theme.ui}}>{book.name}</li>\r\n        )\r\n    })\r\n    return(\r\n        <div className =\"book-list\" style={{color:theme.syntax,background:theme.bg}}>\r\n        \r\n        <ul>\r\n            {booksObj}\r\n        </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Bookmarks","import React, { Component,useContext } from 'react'\r\nimport {ThemeContext} from \"../context/themeContext.js\";\r\n\r\n// export default class ToggleButton extends Component {\r\n//     static contextType= ThemeContext;\r\n    \r\n\r\n//     render() {\r\n        \r\n        \r\n//     }\r\n// }\r\n\r\nconst ToggleButton =()=>{\r\n    const {toggleTheme} = useContext(ThemeContext);\r\n    return (\r\n        <div>\r\n            <button onClick={toggleTheme}>Toggle Theme</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ToggleButton\r\n","import React, { Component,useContext } from 'react'\r\nimport {AuthContext} from \"../context/authContext.js\";\r\n\r\n// export default class ToggleButton extends Component {\r\n//     static contextType= AuthContext;\r\n    \r\n\r\n//     render() {\r\n        \r\n//     }\r\n// }\r\n\r\nconst ToggleButton = ()=>{\r\n    const {toggleAuth} = useContext(AuthContext);\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={toggleAuth}>Toggle Auth</button>\r\n        </div>\r\n    )\r\n}\r\nexport default ToggleButton","import React, { Component } from 'react'\nimport Navbar from \"./components/navbar\";\nimport Bookmarks from \"./components/bookmarks\";\nimport ThemeContextProvider from \"./context/themeContext.js\";\nimport ToggleButton from \"./components/toggleButton\";\nimport ToggleButtonAuth from \"./components/toggleButtonAuth\";\nimport AuthContextProvider from \"./context/authContext.js\";\nimport BookContextProvider from \"./context/bookContext.js\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <ThemeContextProvider>\n      <AuthContextProvider>\n        <Navbar/>\n        <BookContextProvider>\n          <Bookmarks/>\n        </BookContextProvider>\n        <ToggleButton/>\n        <ToggleButtonAuth/>\n      </AuthContextProvider>\n      </ThemeContextProvider>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}